variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE/image

stages:
  - lint
  - test
  - build
  - deploy


lint:
  image: node:20-alpine
  stage: lint
  allow_failure: true
  tags:
    - docker
  script:
    - npm ci
    - npm run lint


#build-staging:
#  interruptible: true
#  stage: build
#  when: manual
#  allow_failure: false
#  except:
#    - tags
#  tags:
#    - docker
#  image: docker:stable
#  script:
#    - unset DOCKER_HOST
#    - CI_COMMIT_REF_NAME_CLEANED=$(echo $CI_COMMIT_REF_NAME | sed -e 's/\//-/g')
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker pull $CONTAINER_IMAGE:${CONTAINER_TAG:-staging} || true
#    - docker build .
#      --cache-from $CONTAINER_IMAGE:${CONTAINER_TAG:-staging}
#      --build-arg CI_COMMIT_TAG=$CI_COMMIT_SHA
#      --build-arg BUILD_ENV=${CI_ENVIRONMENT_NAME:-staging}
#      -t $CONTAINER_IMAGE:${CONTAINER_TAG:-staging}
#      -t $CONTAINER_IMAGE:${CI_COMMIT_REF_NAME_CLEANED}-${CI_COMMIT_SHORT_SHA}-staging
#      -t $CONTAINER_IMAGE:${CI_COMMIT_REF_SLUG}-staging
#    - docker push $CONTAINER_IMAGE:${CONTAINER_TAG:-staging}
#    - docker push $CONTAINER_IMAGE:${CI_COMMIT_REF_NAME_CLEANED}-${CI_COMMIT_SHORT_SHA}-staging
#    - docker push $CONTAINER_IMAGE:${CI_COMMIT_REF_SLUG}-staging
#

#build-production:
#  interruptible: true
#  stage: build
#  when: manual
#  only:
#    - tags
#  tags:
#    - docker
#  image: docker:stable
#  script:
#    - unset DOCKER_HOST
#    - export DOCKER_COMPATIBLE_TAG=${CI_COMMIT_TAG////-}
#    - echo $DOCKER_COMPATIBLE_TAG
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - docker pull $CONTAINER_IMAGE:latest || true
#    - docker build .
#      --cache-from $CONTAINER_IMAGE:latest
#      --build-arg CI_COMMIT_TAG=$DOCKER_COMPATIBLE_TAG
#      -t $CONTAINER_IMAGE:$DOCKER_COMPATIBLE_TAG
#      -t $CONTAINER_IMAGE:latest
#    - docker push $CONTAINER_IMAGE:$DOCKER_COMPATIBLE_TAG
#    - docker push $CONTAINER_IMAGE:latest


#deploy-staging:
#  image: alpine
#  stage: deploy
#  tags:
#    - docker
#  when: manual
#  script:
#    - apk add --no-cache openssh
#    - eval $(ssh-agent -s)
#    - chmod 400 "$STAGE_SERVER_SSH_KEY"
#    - ssh-add "$STAGE_SERVER_SSH_KEY"
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan $STAGE_SERVER_IP >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#    - echo "project path $CI_PROJECT_PATH"
#    - ssh $STAGE_SERVER_USER@$STAGE_SERVER_IP "echo \"$STAGE_SERVER_PASSWORD\" | sudo -S docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
#    - ssh $STAGE_SERVER_USER@$STAGE_SERVER_IP "cd ~/infra-stage; ./scripts/update-stack.sh $CI_PROJECT_PATH $STAGE_SERVER_PASSWORD"
#

#deploy-production:
#  image: alpine
#  stage: deploy
#  tags:
#    - docker
#  only:
#    - tags
#  when: manual
#  script:
#    - apk add --no-cache openssh
#    - eval $(ssh-agent -s)
#    - chmod 400 "$UNITY_SWORM_SSH_KEY"
#    - ssh-add "$UNITY_SWORM_SSH_KEY"
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - ssh-keyscan $UNITY_SWORM_URL >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#    - echo "project path $CI_PROJECT_PATH"
#    - ssh $UNITY_SWORM_USER@$UNITY_SWORM_URL "echo \"$UNITY_SWORM_PASSWORD\" | sudo -S docker login -u $CI_REGISTRY_LOGIN_USER -p $CI_REGISTRY_LOGIN_TOKEN $CI_REGISTRY; ~/infra/update-stack.sh $CI_PROJECT_PATH $UNITY_SWORM_PASSWORD"